
Final Project.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         0000001e  00800100  00000404  00000498  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         00000404  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          00000006  0080011e  0080011e  000004b6  2**0
                  ALLOC
  3 .comment      00000030  00000000  00000000  000004b6  2**0
                  CONTENTS, READONLY
  4 .note.gnu.avr.deviceinfo 00000040  00000000  00000000  000004e8  2**2
                  CONTENTS, READONLY
  5 .debug_aranges 000000a8  00000000  00000000  00000528  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   00000e9e  00000000  00000000  000005d0  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 0000083e  00000000  00000000  0000146e  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   000006a9  00000000  00000000  00001cac  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  00000168  00000000  00000000  00002358  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    000004b7  00000000  00000000  000024c0  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    000004de  00000000  00000000  00002977  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 000000b8  00000000  00000000  00002e55  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 34 00 	jmp	0x68	; 0x68 <__ctors_end>
   4:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
   8:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
   c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  10:	0c 94 8a 00 	jmp	0x114	; 0x114 <__vector_4>
  14:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  18:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  1c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  20:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  24:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  28:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  2c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  30:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  34:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  38:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  3c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  40:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  44:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  48:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  4c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  50:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  54:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  58:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  5c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  60:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  64:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>

00000068 <__ctors_end>:
  68:	11 24       	eor	r1, r1
  6a:	1f be       	out	0x3f, r1	; 63
  6c:	cf ef       	ldi	r28, 0xFF	; 255
  6e:	d8 e0       	ldi	r29, 0x08	; 8
  70:	de bf       	out	0x3e, r29	; 62
  72:	cd bf       	out	0x3d, r28	; 61

00000074 <__do_copy_data>:
  74:	11 e0       	ldi	r17, 0x01	; 1
  76:	a0 e0       	ldi	r26, 0x00	; 0
  78:	b1 e0       	ldi	r27, 0x01	; 1
  7a:	e4 e0       	ldi	r30, 0x04	; 4
  7c:	f4 e0       	ldi	r31, 0x04	; 4
  7e:	02 c0       	rjmp	.+4      	; 0x84 <__do_copy_data+0x10>
  80:	05 90       	lpm	r0, Z+
  82:	0d 92       	st	X+, r0
  84:	ae 31       	cpi	r26, 0x1E	; 30
  86:	b1 07       	cpc	r27, r17
  88:	d9 f7       	brne	.-10     	; 0x80 <__do_copy_data+0xc>

0000008a <__do_clear_bss>:
  8a:	21 e0       	ldi	r18, 0x01	; 1
  8c:	ae e1       	ldi	r26, 0x1E	; 30
  8e:	b1 e0       	ldi	r27, 0x01	; 1
  90:	01 c0       	rjmp	.+2      	; 0x94 <.do_clear_bss_start>

00000092 <.do_clear_bss_loop>:
  92:	1d 92       	st	X+, r1

00000094 <.do_clear_bss_start>:
  94:	a4 32       	cpi	r26, 0x24	; 36
  96:	b2 07       	cpc	r27, r18
  98:	e1 f7       	brne	.-8      	; 0x92 <.do_clear_bss_loop>
  9a:	0e 94 d4 00 	call	0x1a8	; 0x1a8 <main>
  9e:	0c 94 00 02 	jmp	0x400	; 0x400 <_exit>

000000a2 <__bad_interrupt>:
  a2:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

000000a6 <uart_tx>:

void trig()
{
	PORTC |= (1<<US_TRIG);
	_delay_us(10);
	PORTC &= ~(1<<US_TRIG);
  a6:	e0 ec       	ldi	r30, 0xC0	; 192
  a8:	f0 e0       	ldi	r31, 0x00	; 0
  aa:	90 81       	ld	r25, Z
  ac:	95 ff       	sbrs	r25, 5
  ae:	fd cf       	rjmp	.-6      	; 0xaa <uart_tx+0x4>
  b0:	80 93 c6 00 	sts	0x00C6, r24	; 0x8000c6 <__TEXT_REGION_LENGTH__+0x7e00c6>
  b4:	08 95       	ret

000000b6 <uart_tx_str>:
  b6:	cf 93       	push	r28
  b8:	df 93       	push	r29
  ba:	ec 01       	movw	r28, r24
  bc:	88 81       	ld	r24, Y
  be:	88 23       	and	r24, r24
  c0:	31 f0       	breq	.+12     	; 0xce <uart_tx_str+0x18>
  c2:	21 96       	adiw	r28, 0x01	; 1
  c4:	0e 94 53 00 	call	0xa6	; 0xa6 <uart_tx>
  c8:	89 91       	ld	r24, Y+
  ca:	81 11       	cpse	r24, r1
  cc:	fb cf       	rjmp	.-10     	; 0xc4 <uart_tx_str+0xe>
  ce:	df 91       	pop	r29
  d0:	cf 91       	pop	r28
  d2:	08 95       	ret

000000d4 <InitBluetooth>:
  d4:	10 92 c5 00 	sts	0x00C5, r1	; 0x8000c5 <__TEXT_REGION_LENGTH__+0x7e00c5>
  d8:	87 e6       	ldi	r24, 0x67	; 103
  da:	80 93 c4 00 	sts	0x00C4, r24	; 0x8000c4 <__TEXT_REGION_LENGTH__+0x7e00c4>
  de:	88 e1       	ldi	r24, 0x18	; 24
  e0:	80 93 c1 00 	sts	0x00C1, r24	; 0x8000c1 <__TEXT_REGION_LENGTH__+0x7e00c1>
  e4:	86 e0       	ldi	r24, 0x06	; 6
  e6:	80 93 c2 00 	sts	0x00C2, r24	; 0x8000c2 <__TEXT_REGION_LENGTH__+0x7e00c2>
  ea:	8b e0       	ldi	r24, 0x0B	; 11
  ec:	91 e0       	ldi	r25, 0x01	; 1
  ee:	0e 94 5b 00 	call	0xb6	; 0xb6 <uart_tx_str>
  f2:	84 e1       	ldi	r24, 0x14	; 20
  f4:	91 e0       	ldi	r25, 0x01	; 1
  f6:	0e 94 5b 00 	call	0xb6	; 0xb6 <uart_tx_str>
  fa:	80 e0       	ldi	r24, 0x00	; 0
  fc:	0e 94 53 00 	call	0xa6	; 0xa6 <uart_tx>
 100:	08 95       	ret

00000102 <uart_rx>:
 102:	80 91 c0 00 	lds	r24, 0x00C0	; 0x8000c0 <__TEXT_REGION_LENGTH__+0x7e00c0>
 106:	88 23       	and	r24, r24
 108:	1c f4       	brge	.+6      	; 0x110 <uart_rx+0xe>
 10a:	80 91 c6 00 	lds	r24, 0x00C6	; 0x8000c6 <__TEXT_REGION_LENGTH__+0x7e00c6>
 10e:	08 95       	ret
 110:	80 e0       	ldi	r24, 0x00	; 0
 112:	08 95       	ret

00000114 <__vector_4>:
 114:	1f 92       	push	r1
 116:	0f 92       	push	r0
 118:	0f b6       	in	r0, 0x3f	; 63
 11a:	0f 92       	push	r0
 11c:	11 24       	eor	r1, r1
 11e:	8f 93       	push	r24
 120:	9f 93       	push	r25
 122:	34 9b       	sbis	0x06, 4	; 6
 124:	05 c0       	rjmp	.+10     	; 0x130 <__vector_4+0x1c>
 126:	10 92 85 00 	sts	0x0085, r1	; 0x800085 <__TEXT_REGION_LENGTH__+0x7e0085>
 12a:	10 92 84 00 	sts	0x0084, r1	; 0x800084 <__TEXT_REGION_LENGTH__+0x7e0084>
 12e:	08 c0       	rjmp	.+16     	; 0x140 <__vector_4+0x2c>
 130:	80 91 84 00 	lds	r24, 0x0084	; 0x800084 <__TEXT_REGION_LENGTH__+0x7e0084>
 134:	90 91 85 00 	lds	r25, 0x0085	; 0x800085 <__TEXT_REGION_LENGTH__+0x7e0085>
 138:	90 93 1f 01 	sts	0x011F, r25	; 0x80011f <__data_end+0x1>
 13c:	80 93 1e 01 	sts	0x011E, r24	; 0x80011e <__data_end>
 140:	9f 91       	pop	r25
 142:	8f 91       	pop	r24
 144:	0f 90       	pop	r0
 146:	0f be       	out	0x3f, r0	; 63
 148:	0f 90       	pop	r0
 14a:	1f 90       	pop	r1
 14c:	18 95       	reti

0000014e <InitMotorControl>:
	// ENB 6
	// IN1 7
	// IN2 8
	// IN3 9
	// IN4 11
	DDRD = DDRD | 0b11100000;
 14e:	8a b1       	in	r24, 0x0a	; 10
 150:	80 6e       	ori	r24, 0xE0	; 224
 152:	8a b9       	out	0x0a, r24	; 10
	DDRB = DDRB | 0b00001011;
 154:	84 b1       	in	r24, 0x04	; 4
 156:	8b 60       	ori	r24, 0x0B	; 11
 158:	84 b9       	out	0x04, r24	; 4
	sei();
 15a:	78 94       	sei
	TCCR0A = 0xA3;
 15c:	83 ea       	ldi	r24, 0xA3	; 163
 15e:	84 bd       	out	0x24, r24	; 36
	TCCR0B = 0x04;
 160:	84 e0       	ldi	r24, 0x04	; 4
 162:	85 bd       	out	0x25, r24	; 37
	TCNT0 = 0x00;
 164:	16 bc       	out	0x26, r1	; 38
 166:	08 95       	ret

00000168 <forward>:
	return;
}

void forward(int speed)
{
	PORTD = 0b11100000;
 168:	90 ee       	ldi	r25, 0xE0	; 224
 16a:	9b b9       	out	0x0b, r25	; 11
	PORTB = 0b00001000; 
 16c:	98 e0       	ldi	r25, 0x08	; 8
 16e:	95 b9       	out	0x05, r25	; 5
	
	if(speed >=0 || speed <= 255) {
		OCR0A = speed;
 170:	87 bd       	out	0x27, r24	; 39
		OCR0B = speed;		
 172:	88 bd       	out	0x28, r24	; 40
 174:	08 95       	ret

00000176 <back>:
	return;
}

void back(int speed)
{
	PORTD = 0b01100000;
 176:	90 e6       	ldi	r25, 0x60	; 96
 178:	9b b9       	out	0x0b, r25	; 11
	PORTB = 0b00000011;
 17a:	93 e0       	ldi	r25, 0x03	; 3
 17c:	95 b9       	out	0x05, r25	; 5
	
	if(speed >=0 || speed <= 255) {
		OCR0A = speed;
 17e:	87 bd       	out	0x27, r24	; 39
		OCR0B = speed;
 180:	88 bd       	out	0x28, r24	; 40
 182:	08 95       	ret

00000184 <right>:
	return;
}

void right(int speed)
{
	PORTD = 0b11100000;
 184:	90 ee       	ldi	r25, 0xE0	; 224
 186:	9b b9       	out	0x0b, r25	; 11
	PORTB = 0b00000010;
 188:	92 e0       	ldi	r25, 0x02	; 2
 18a:	95 b9       	out	0x05, r25	; 5
	
	if(speed >=0 || speed <= 255) {
		OCR0A = speed;
 18c:	87 bd       	out	0x27, r24	; 39
		OCR0B = speed;
 18e:	88 bd       	out	0x28, r24	; 40
 190:	08 95       	ret

00000192 <left>:
	return;
}

void left(int speed)
{
	PORTD = 0b01100000;
 192:	90 e6       	ldi	r25, 0x60	; 96
 194:	9b b9       	out	0x0b, r25	; 11
	PORTB = 0b00001001;
 196:	99 e0       	ldi	r25, 0x09	; 9
 198:	95 b9       	out	0x05, r25	; 5
	
	if(speed >=0 || speed <= 255) {
		OCR0A = speed;
 19a:	87 bd       	out	0x27, r24	; 39
		OCR0B = speed;
 19c:	88 bd       	out	0x28, r24	; 40
 19e:	08 95       	ret

000001a0 <stop>:
	return;
}

void stop()
{
	PORTD = 0b01100000;
 1a0:	80 e6       	ldi	r24, 0x60	; 96
 1a2:	8b b9       	out	0x0b, r24	; 11
	PORTB = 0b00000000;
 1a4:	15 b8       	out	0x05, r1	; 5
 1a6:	08 95       	ret

000001a8 <main>:
int main(void)
{
	int autoControl = 0;
	
	// Initiations
	InitBluetooth();
 1a8:	0e 94 6a 00 	call	0xd4	; 0xd4 <InitBluetooth>
	InitMotorControl();
 1ac:	0e 94 a7 00 	call	0x14e	; 0x14e <InitMotorControl>
	
	DDRB = (1 << PORTB5); // set the pin connected to the on board led as output
 1b0:	80 e2       	ldi	r24, 0x20	; 32
 1b2:	84 b9       	out	0x04, r24	; 4
#include "Ultrasonic.h"
#include "motor_control.h"

int main(void)
{
	int autoControl = 0;
 1b4:	c0 e0       	ldi	r28, 0x00	; 0
 1b6:	d0 e0       	ldi	r29, 0x00	; 0
				stop();
			}
			
			// return to auto mode
			else if(keystroke == 'y')
				autoControl = 1;
 1b8:	01 e0       	ldi	r16, 0x01	; 1
 1ba:	10 e0       	ldi	r17, 0x00	; 0
 1bc:	93 c0       	rjmp	.+294    	; 0x2e4 <main+0x13c>
		{
			double distLeft;
			double distRight;
			double distFront;
			
			if(distLeft < 10 && distFront < 10 && distRight < 10)
 1be:	20 e0       	ldi	r18, 0x00	; 0
 1c0:	30 e0       	ldi	r19, 0x00	; 0
 1c2:	40 e2       	ldi	r20, 0x20	; 32
 1c4:	51 e4       	ldi	r21, 0x41	; 65
 1c6:	60 e0       	ldi	r22, 0x00	; 0
 1c8:	70 e0       	ldi	r23, 0x00	; 0
 1ca:	cb 01       	movw	r24, r22
 1cc:	0e 94 d2 01 	call	0x3a4	; 0x3a4 <__cmpsf2>
 1d0:	88 23       	and	r24, r24
 1d2:	2c f5       	brge	.+74     	; 0x21e <main+0x76>
 1d4:	20 e0       	ldi	r18, 0x00	; 0
 1d6:	30 e0       	ldi	r19, 0x00	; 0
 1d8:	40 e2       	ldi	r20, 0x20	; 32
 1da:	51 e4       	ldi	r21, 0x41	; 65
 1dc:	60 e0       	ldi	r22, 0x00	; 0
 1de:	70 e0       	ldi	r23, 0x00	; 0
 1e0:	cb 01       	movw	r24, r22
 1e2:	0e 94 d2 01 	call	0x3a4	; 0x3a4 <__cmpsf2>
 1e6:	88 23       	and	r24, r24
 1e8:	d4 f4       	brge	.+52     	; 0x21e <main+0x76>
 1ea:	20 e0       	ldi	r18, 0x00	; 0
 1ec:	30 e0       	ldi	r19, 0x00	; 0
 1ee:	40 e2       	ldi	r20, 0x20	; 32
 1f0:	51 e4       	ldi	r21, 0x41	; 65
 1f2:	60 e0       	ldi	r22, 0x00	; 0
 1f4:	70 e0       	ldi	r23, 0x00	; 0
 1f6:	cb 01       	movw	r24, r22
 1f8:	0e 94 d2 01 	call	0x3a4	; 0x3a4 <__cmpsf2>
 1fc:	88 23       	and	r24, r24
 1fe:	7c f4       	brge	.+30     	; 0x21e <main+0x76>
			{
				back(180);
 200:	84 eb       	ldi	r24, 0xB4	; 180
 202:	90 e0       	ldi	r25, 0x00	; 0
 204:	0e 94 bb 00 	call	0x176	; 0x176 <back>
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
 208:	2f ef       	ldi	r18, 0xFF	; 255
 20a:	83 ec       	ldi	r24, 0xC3	; 195
 20c:	99 e0       	ldi	r25, 0x09	; 9
 20e:	21 50       	subi	r18, 0x01	; 1
 210:	80 40       	sbci	r24, 0x00	; 0
 212:	90 40       	sbci	r25, 0x00	; 0
 214:	e1 f7       	brne	.-8      	; 0x20e <main+0x66>
 216:	00 c0       	rjmp	.+0      	; 0x218 <main+0x70>
 218:	00 00       	nop
				_delay_ms(200);
				stop();
 21a:	0e 94 d0 00 	call	0x1a0	; 0x1a0 <stop>
			}
			
			
			if (distFront > 10)
 21e:	20 e0       	ldi	r18, 0x00	; 0
 220:	30 e0       	ldi	r19, 0x00	; 0
 222:	40 e2       	ldi	r20, 0x20	; 32
 224:	51 e4       	ldi	r21, 0x41	; 65
 226:	60 e0       	ldi	r22, 0x00	; 0
 228:	70 e0       	ldi	r23, 0x00	; 0
 22a:	cb 01       	movw	r24, r22
 22c:	0e 94 fb 01 	call	0x3f6	; 0x3f6 <__gesf2>
 230:	18 16       	cp	r1, r24
 232:	84 f4       	brge	.+32     	; 0x254 <main+0xac>
			{
				forward(180);
 234:	84 eb       	ldi	r24, 0xB4	; 180
 236:	90 e0       	ldi	r25, 0x00	; 0
 238:	0e 94 b4 00 	call	0x168	; 0x168 <forward>
 23c:	2f ef       	ldi	r18, 0xFF	; 255
 23e:	83 ec       	ldi	r24, 0xC3	; 195
 240:	99 e0       	ldi	r25, 0x09	; 9
 242:	21 50       	subi	r18, 0x01	; 1
 244:	80 40       	sbci	r24, 0x00	; 0
 246:	90 40       	sbci	r25, 0x00	; 0
 248:	e1 f7       	brne	.-8      	; 0x242 <main+0x9a>
 24a:	00 c0       	rjmp	.+0      	; 0x24c <main+0xa4>
 24c:	00 00       	nop
				_delay_ms(200);
				stop();
 24e:	0e 94 d0 00 	call	0x1a0	; 0x1a0 <stop>
 252:	48 c0       	rjmp	.+144    	; 0x2e4 <main+0x13c>
			}
			
			else if (distRight > 10)
 254:	20 e0       	ldi	r18, 0x00	; 0
 256:	30 e0       	ldi	r19, 0x00	; 0
 258:	40 e2       	ldi	r20, 0x20	; 32
 25a:	51 e4       	ldi	r21, 0x41	; 65
 25c:	60 e0       	ldi	r22, 0x00	; 0
 25e:	70 e0       	ldi	r23, 0x00	; 0
 260:	cb 01       	movw	r24, r22
 262:	0e 94 fb 01 	call	0x3f6	; 0x3f6 <__gesf2>
 266:	18 16       	cp	r1, r24
 268:	84 f4       	brge	.+32     	; 0x28a <main+0xe2>
			{
				right(120);
 26a:	88 e7       	ldi	r24, 0x78	; 120
 26c:	90 e0       	ldi	r25, 0x00	; 0
 26e:	0e 94 c2 00 	call	0x184	; 0x184 <right>
 272:	2f ef       	ldi	r18, 0xFF	; 255
 274:	81 ee       	ldi	r24, 0xE1	; 225
 276:	94 e0       	ldi	r25, 0x04	; 4
 278:	21 50       	subi	r18, 0x01	; 1
 27a:	80 40       	sbci	r24, 0x00	; 0
 27c:	90 40       	sbci	r25, 0x00	; 0
 27e:	e1 f7       	brne	.-8      	; 0x278 <main+0xd0>
 280:	00 c0       	rjmp	.+0      	; 0x282 <main+0xda>
 282:	00 00       	nop
				_delay_ms(100);
				stop();
 284:	0e 94 d0 00 	call	0x1a0	; 0x1a0 <stop>
 288:	2d c0       	rjmp	.+90     	; 0x2e4 <main+0x13c>
			}
			
			else if (distLeft > 10)
 28a:	20 e0       	ldi	r18, 0x00	; 0
 28c:	30 e0       	ldi	r19, 0x00	; 0
 28e:	40 e2       	ldi	r20, 0x20	; 32
 290:	51 e4       	ldi	r21, 0x41	; 65
 292:	60 e0       	ldi	r22, 0x00	; 0
 294:	70 e0       	ldi	r23, 0x00	; 0
 296:	cb 01       	movw	r24, r22
 298:	0e 94 fb 01 	call	0x3f6	; 0x3f6 <__gesf2>
 29c:	18 16       	cp	r1, r24
 29e:	84 f4       	brge	.+32     	; 0x2c0 <main+0x118>
			{
				left(120);
 2a0:	88 e7       	ldi	r24, 0x78	; 120
 2a2:	90 e0       	ldi	r25, 0x00	; 0
 2a4:	0e 94 c9 00 	call	0x192	; 0x192 <left>
 2a8:	2f ef       	ldi	r18, 0xFF	; 255
 2aa:	81 ee       	ldi	r24, 0xE1	; 225
 2ac:	94 e0       	ldi	r25, 0x04	; 4
 2ae:	21 50       	subi	r18, 0x01	; 1
 2b0:	80 40       	sbci	r24, 0x00	; 0
 2b2:	90 40       	sbci	r25, 0x00	; 0
 2b4:	e1 f7       	brne	.-8      	; 0x2ae <main+0x106>
 2b6:	00 c0       	rjmp	.+0      	; 0x2b8 <main+0x110>
 2b8:	00 00       	nop
				_delay_ms(100);
				stop();
 2ba:	0e 94 d0 00 	call	0x1a0	; 0x1a0 <stop>
 2be:	12 c0       	rjmp	.+36     	; 0x2e4 <main+0x13c>
			}
			
			else
			{
				left(180);
 2c0:	84 eb       	ldi	r24, 0xB4	; 180
 2c2:	90 e0       	ldi	r25, 0x00	; 0
 2c4:	0e 94 c9 00 	call	0x192	; 0x192 <left>
 2c8:	2f ef       	ldi	r18, 0xFF	; 255
 2ca:	83 ec       	ldi	r24, 0xC3	; 195
 2cc:	99 e0       	ldi	r25, 0x09	; 9
 2ce:	21 50       	subi	r18, 0x01	; 1
 2d0:	80 40       	sbci	r24, 0x00	; 0
 2d2:	90 40       	sbci	r25, 0x00	; 0
 2d4:	e1 f7       	brne	.-8      	; 0x2ce <main+0x126>
 2d6:	00 c0       	rjmp	.+0      	; 0x2d8 <main+0x130>
 2d8:	00 00       	nop
				_delay_ms(200);
				stop();
 2da:	0e 94 d0 00 	call	0x1a0	; 0x1a0 <stop>
 2de:	02 c0       	rjmp	.+4      	; 0x2e4 <main+0x13c>
				stop();
			}
			
			// return to auto mode
			else if(keystroke == 'y')
				autoControl = 1;
 2e0:	c0 2f       	mov	r28, r16
 2e2:	d1 2f       	mov	r29, r17
	DDRB = (1 << PORTB5); // set the pin connected to the on board led as output
	
	while(1)
	{	
		
		while(autoControl == 1)
 2e4:	c1 30       	cpi	r28, 0x01	; 1
 2e6:	d1 05       	cpc	r29, r1
 2e8:	09 f4       	brne	.+2      	; 0x2ec <main+0x144>
 2ea:	69 cf       	rjmp	.-302    	; 0x1be <main+0x16>
				_delay_ms(200);
				stop();
			}
		}
		
		while(autoControl == 0)
 2ec:	20 97       	sbiw	r28, 0x00	; 0
 2ee:	d1 f7       	brne	.-12     	; 0x2e4 <main+0x13c>
	uart_tx(0);
}

char receiveByte()
{
	return uart_rx();
 2f0:	0e 94 81 00 	call	0x102	; 0x102 <uart_rx>
				S moves backward 
				
		     The on-board led blinks when it receives a command. */
			
			// turn left
			if(keystroke == 'a')
 2f4:	81 36       	cpi	r24, 0x61	; 97
 2f6:	91 f4       	brne	.+36     	; 0x31c <main+0x174>
			{
				left(turnSpeed); // motor control
 2f8:	88 ec       	ldi	r24, 0xC8	; 200
 2fa:	90 e0       	ldi	r25, 0x00	; 0
 2fc:	0e 94 c9 00 	call	0x192	; 0x192 <left>
				PORTB |= (1 << PORTB5); // turn the led on
 300:	2d 9a       	sbi	0x05, 5	; 5
 302:	9f ef       	ldi	r25, 0xFF	; 255
 304:	20 e7       	ldi	r18, 0x70	; 112
 306:	82 e0       	ldi	r24, 0x02	; 2
 308:	91 50       	subi	r25, 0x01	; 1
 30a:	20 40       	sbci	r18, 0x00	; 0
 30c:	80 40       	sbci	r24, 0x00	; 0
 30e:	e1 f7       	brne	.-8      	; 0x308 <main+0x160>
 310:	00 c0       	rjmp	.+0      	; 0x312 <main+0x16a>
 312:	00 00       	nop
				_delay_ms(delayTime);
				PORTB &= ~(1 << PORTB5);
 314:	2d 98       	cbi	0x05, 5	; 5
				stop();
 316:	0e 94 d0 00 	call	0x1a0	; 0x1a0 <stop>
 31a:	ea cf       	rjmp	.-44     	; 0x2f0 <main+0x148>
			}
			
			// move forward
			else if(keystroke == 'w')
 31c:	87 37       	cpi	r24, 0x77	; 119
 31e:	91 f4       	brne	.+36     	; 0x344 <main+0x19c>
			{
				forward(moveSpeed);
 320:	8f ef       	ldi	r24, 0xFF	; 255
 322:	90 e0       	ldi	r25, 0x00	; 0
 324:	0e 94 b4 00 	call	0x168	; 0x168 <forward>
				PORTB |= (1 << PORTB5);
 328:	2d 9a       	sbi	0x05, 5	; 5
 32a:	9f ef       	ldi	r25, 0xFF	; 255
 32c:	20 e7       	ldi	r18, 0x70	; 112
 32e:	82 e0       	ldi	r24, 0x02	; 2
 330:	91 50       	subi	r25, 0x01	; 1
 332:	20 40       	sbci	r18, 0x00	; 0
 334:	80 40       	sbci	r24, 0x00	; 0
 336:	e1 f7       	brne	.-8      	; 0x330 <main+0x188>
 338:	00 c0       	rjmp	.+0      	; 0x33a <main+0x192>
 33a:	00 00       	nop
				_delay_ms(delayTime);
				PORTB &= ~(1 << PORTB5);
 33c:	2d 98       	cbi	0x05, 5	; 5
				stop();		
 33e:	0e 94 d0 00 	call	0x1a0	; 0x1a0 <stop>
 342:	d6 cf       	rjmp	.-84     	; 0x2f0 <main+0x148>
			}
			
			// turn right
			else if(keystroke == 'd')
 344:	84 36       	cpi	r24, 0x64	; 100
 346:	91 f4       	brne	.+36     	; 0x36c <main+0x1c4>
			{
				right(turnSpeed);
 348:	88 ec       	ldi	r24, 0xC8	; 200
 34a:	90 e0       	ldi	r25, 0x00	; 0
 34c:	0e 94 c2 00 	call	0x184	; 0x184 <right>
				PORTB |= (1 << PORTB5);
 350:	2d 9a       	sbi	0x05, 5	; 5
 352:	9f ef       	ldi	r25, 0xFF	; 255
 354:	20 e7       	ldi	r18, 0x70	; 112
 356:	82 e0       	ldi	r24, 0x02	; 2
 358:	91 50       	subi	r25, 0x01	; 1
 35a:	20 40       	sbci	r18, 0x00	; 0
 35c:	80 40       	sbci	r24, 0x00	; 0
 35e:	e1 f7       	brne	.-8      	; 0x358 <main+0x1b0>
 360:	00 c0       	rjmp	.+0      	; 0x362 <main+0x1ba>
 362:	00 00       	nop
				_delay_ms(delayTime);
				PORTB &= ~(1 << PORTB5);
 364:	2d 98       	cbi	0x05, 5	; 5
				stop();
 366:	0e 94 d0 00 	call	0x1a0	; 0x1a0 <stop>
 36a:	c2 cf       	rjmp	.-124    	; 0x2f0 <main+0x148>
			}
			
			// move backwards
			else if(keystroke == 's')
 36c:	83 37       	cpi	r24, 0x73	; 115
 36e:	91 f4       	brne	.+36     	; 0x394 <main+0x1ec>
			{
				back(moveSpeed);
 370:	8f ef       	ldi	r24, 0xFF	; 255
 372:	90 e0       	ldi	r25, 0x00	; 0
 374:	0e 94 bb 00 	call	0x176	; 0x176 <back>
				PORTB |= (1 << PORTB5);
 378:	2d 9a       	sbi	0x05, 5	; 5
 37a:	9f ef       	ldi	r25, 0xFF	; 255
 37c:	20 e7       	ldi	r18, 0x70	; 112
 37e:	82 e0       	ldi	r24, 0x02	; 2
 380:	91 50       	subi	r25, 0x01	; 1
 382:	20 40       	sbci	r18, 0x00	; 0
 384:	80 40       	sbci	r24, 0x00	; 0
 386:	e1 f7       	brne	.-8      	; 0x380 <main+0x1d8>
 388:	00 c0       	rjmp	.+0      	; 0x38a <main+0x1e2>
 38a:	00 00       	nop
				_delay_ms(delayTime);
				PORTB &= ~(1 << PORTB5);
 38c:	2d 98       	cbi	0x05, 5	; 5
				stop();
 38e:	0e 94 d0 00 	call	0x1a0	; 0x1a0 <stop>
 392:	ae cf       	rjmp	.-164    	; 0x2f0 <main+0x148>
			}
			
			// return to auto mode
			else if(keystroke == 'y')
 394:	89 37       	cpi	r24, 0x79	; 121
 396:	09 f4       	brne	.+2      	; 0x39a <main+0x1f2>
 398:	a3 cf       	rjmp	.-186    	; 0x2e0 <main+0x138>
	uart_tx(c);
}

void sendString(char* s)
{
	uart_tx_str(s);
 39a:	80 e0       	ldi	r24, 0x00	; 0
 39c:	91 e0       	ldi	r25, 0x01	; 1
 39e:	0e 94 5b 00 	call	0xb6	; 0xb6 <uart_tx_str>
 3a2:	a6 cf       	rjmp	.-180    	; 0x2f0 <main+0x148>

000003a4 <__cmpsf2>:
 3a4:	0e 94 d7 01 	call	0x3ae	; 0x3ae <__fp_cmp>
 3a8:	08 f4       	brcc	.+2      	; 0x3ac <__cmpsf2+0x8>
 3aa:	81 e0       	ldi	r24, 0x01	; 1
 3ac:	08 95       	ret

000003ae <__fp_cmp>:
 3ae:	99 0f       	add	r25, r25
 3b0:	00 08       	sbc	r0, r0
 3b2:	55 0f       	add	r21, r21
 3b4:	aa 0b       	sbc	r26, r26
 3b6:	e0 e8       	ldi	r30, 0x80	; 128
 3b8:	fe ef       	ldi	r31, 0xFE	; 254
 3ba:	16 16       	cp	r1, r22
 3bc:	17 06       	cpc	r1, r23
 3be:	e8 07       	cpc	r30, r24
 3c0:	f9 07       	cpc	r31, r25
 3c2:	c0 f0       	brcs	.+48     	; 0x3f4 <__fp_cmp+0x46>
 3c4:	12 16       	cp	r1, r18
 3c6:	13 06       	cpc	r1, r19
 3c8:	e4 07       	cpc	r30, r20
 3ca:	f5 07       	cpc	r31, r21
 3cc:	98 f0       	brcs	.+38     	; 0x3f4 <__fp_cmp+0x46>
 3ce:	62 1b       	sub	r22, r18
 3d0:	73 0b       	sbc	r23, r19
 3d2:	84 0b       	sbc	r24, r20
 3d4:	95 0b       	sbc	r25, r21
 3d6:	39 f4       	brne	.+14     	; 0x3e6 <__fp_cmp+0x38>
 3d8:	0a 26       	eor	r0, r26
 3da:	61 f0       	breq	.+24     	; 0x3f4 <__fp_cmp+0x46>
 3dc:	23 2b       	or	r18, r19
 3de:	24 2b       	or	r18, r20
 3e0:	25 2b       	or	r18, r21
 3e2:	21 f4       	brne	.+8      	; 0x3ec <__fp_cmp+0x3e>
 3e4:	08 95       	ret
 3e6:	0a 26       	eor	r0, r26
 3e8:	09 f4       	brne	.+2      	; 0x3ec <__fp_cmp+0x3e>
 3ea:	a1 40       	sbci	r26, 0x01	; 1
 3ec:	a6 95       	lsr	r26
 3ee:	8f ef       	ldi	r24, 0xFF	; 255
 3f0:	81 1d       	adc	r24, r1
 3f2:	81 1d       	adc	r24, r1
 3f4:	08 95       	ret

000003f6 <__gesf2>:
 3f6:	0e 94 d7 01 	call	0x3ae	; 0x3ae <__fp_cmp>
 3fa:	08 f4       	brcc	.+2      	; 0x3fe <__gesf2+0x8>
 3fc:	8f ef       	ldi	r24, 0xFF	; 255
 3fe:	08 95       	ret

00000400 <_exit>:
 400:	f8 94       	cli

00000402 <__stop_program>:
 402:	ff cf       	rjmp	.-2      	; 0x402 <__stop_program>
